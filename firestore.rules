/**
 * @fileoverview Firestore Security Rules for IPS Virtual – Salud en Casa.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to the `departments` and `cities` collections.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `{userId}` must match the
 *   authenticated user's UID. This ensures that users can only manage their own profiles.
 * - Departments and Cities are stored in top-level collections (`/departments/{departmentId}`
 *   and `/cities/{cityId}`), allowing public read access.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - The `users` collection should not be listable, so `list` is denied.
 * - Departments and cities are publicly readable but not writable by clients.
 * - The rules do not validate the data schema beyond requiring that the `id` field
 *   in user documents matches the `userId` in the path, enforcing ownership.
 *
 * Denormalization for Authorization:
 * The `users` collection enforces that the document ID matches the authenticated user's UID.
 * This avoids the need for additional `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * Public data (departments, cities) is stored in separate, top-level collections,
 * while private user data is stored under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'aoz5fhQSEbdsGNxUpXbT7SmcVgu1' can create their own profile at /users/aoz5fhQSEbdsGNxUpXbT7SmcVgu1 with matching id.
     * @allow (get, update, delete) - User 'aoz5fhQSEbdsGNxUpXbT7SmcVgu1' can read/update/delete their own profile at /users/aoz5fhQSEbdsGNxUpXbT7SmcVgu1.
     * @deny  (create) - User 'aoz5fhQSEbdsGNxUpXbT7SmcVgu1' cannot create a profile at /users/otherUserId.
     * @deny  (get, update, delete) - User 'aoz5fhQSEbdsGNxUpXbT7SmcVgu1' cannot read/update/delete the profile of another user at /users/otherUserId.
     * @deny  (list) - No one can list all users.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId} {
      // Validate that the userId matches the authenticated user's UID
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Validate that the user is signed in and owns the resource and that the resource exists (update/delete)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      //isSigned in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      
      // Allow authenticated users to list users (needed for querying patients, doctors, etc.)
      // The application uses role-based queries to filter users appropriately
      allow list: if isSignedIn();

      // On create, enforce that the document ID matches the authenticated user's UID.
      // This links the path to the user.
      allow create: if isSignedIn() && request.resource.data.id == userId;

      // On update, allow if user is the owner and either:
      // 1. The id field is not being changed (if it exists in the update), OR
      // 2. The id field is not included in the update (partial update)
      allow update: if isExistingOwner(userId) && 
        (!("id" in request.resource.data) || request.resource.data.id == resource.data.id);

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to the departments collection.  No client writes allowed.
     * @path /departments/{departmentId}
     * @allow (get, list) - Any user can read departments.
     * @deny  (create, update, delete) - No user can create, update, or delete departments via client.
     * @principle Allows public read access to static data; restricts write access.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the cities collection.  No client writes allowed.
     * @path /cities/{cityId}
     * @allow (get, list) - Any user can read cities.
     * @deny  (create, update, delete) - No user can create, update, or delete cities via client.
     * @principle Allows public read access to static data; restricts write access.
     */
    match /cities/{cityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to appointments collection.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Authenticated users can read appointments (filtered by userId or doctorId in queries).
     * @allow (create, update, delete) - Authenticated users can manage appointments.
     * @principle Allows authenticated users to manage their appointments.
     * @fields userId, doctorId, doctorName, serviceName, date, time, status, notes, diagnosis (optional - added when consultation is completed)
     * @status values: pendiente, confirmada, cancelada, completada
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages access to formulas (prescriptions) collection.
     * @path /formulas/{formulaId}
     * @allow (get, list) - Authenticated users can read formulas (filtered by userId or doctorId in queries).
     * @allow (create, update, delete) - Authenticated users can manage formulas.
     * @principle Allows authenticated users to manage prescriptions.
     */
    match /formulas/{formulaId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages access to services collection.
     * @path /services/{serviceId}
     * @allow (get, list) - Authenticated users can read services.
     * @allow (create, update, delete) - Authenticated users can manage services.
     * @principle Allows authenticated users to view and manage medical services.
     */
    match /services/{serviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages access to shifts (work schedules) collection.
     * @path /shifts/{shiftId}
     * @allow (get, list) - Authenticated users can read shifts.
     * @allow (create, update, delete) - Authenticated users can manage shifts.
     * @principle Allows authenticated users to view and manage work shifts.
     */
    match /shifts/{shiftId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages access to paciente_roles collection.
     * @path /paciente_roles/{userId}
     * @allow (get, list) - Authenticated users can read patient roles.
     * @allow (create) - Users can create their own patient role document during signup.
     * @allow (update, delete) - Authenticated users can manage patient roles.
     * @principle Allows users to create their patient role during registration.
     */
    match /paciente_roles/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get, list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Evolution notes (Notas de Evolución) - Medical progress notes written by doctors
     * @path /evolution_notes/{noteId}
     * @allow (create) - Authenticated medical staff (PERSONAL) can create notes
     * @allow (list, get) - Medical staff can read all notes; Patients can only read their own notes (where patientId matches their UID)
     * @deny (update, delete) - Notes are immutable once created for medical record integrity
     * @principle Medical staff documents patient progress; patients have read-only access to their own medical history
     */
    match /evolution_notes/{noteId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isPatientOwner() {
        return request.auth != null && resource != null && resource.data.patientId == request.auth.uid;
      }

      function isMedicalStaff() {
        return request.auth != null && 
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['PERSONAL', 'ADMIN'];
      }

      function isPatient() {
        return request.auth != null && 
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'PACIENTE';
      }

      // Medical staff can create notes with proper structure
      allow create: if isSignedIn() && isMedicalStaff() && 
                       request.resource.data.keys().hasAll(['patientId', 'doctorId', 'doctorName', 'content', 'date']) &&
                       request.resource.data.doctorId == request.auth.uid;
      
      // Medical staff can read all notes; patients can only read notes where they are the patient
      allow get: if isSignedIn() && (isMedicalStaff() || isPatientOwner());
      
      // For list queries: allow if medical staff OR if patient (app-side queries filter by patientId)
      allow list: if isSignedIn() && (isMedicalStaff() || isPatient());
      
      // Notes are immutable for medical record integrity
      allow update, delete: if false;
    }

    // Notifications collection
    // Structure: {
    //   userId: string,          // User who receives the notification
    //   type: string,            // 'appointment_confirmed', 'appointment_cancelled', 'diagnosis_ready', 'formula_created', 'note_added'
    //   title: string,           // Notification title
    //   message: string,         // Notification message
    //   read: boolean,           // Whether the notification has been read
    //   relatedId: string,       // ID of related document (appointmentId, formulaId, etc)
    //   createdAt: timestamp,    // When notification was created
    // }
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}